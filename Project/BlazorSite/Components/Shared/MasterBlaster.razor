@using System
@using System.Threading.Tasks
@using Foundation.BlazorExtensions.Components
@using Foundation.BlazorExtensions.Extensions
@using Microsoft.AspNetCore.Components

@implements System.IDisposable

@inherits Microsoft.AspNetCore.Components.LayoutComponentBase
@inject Foundation.BlazorExtensions.BlazorStateMachine BlazorStateMachine

@inject NavigationManager NavigationManager;
@inject LayoutService LayoutService;
@inject LanguageService LanguageService;
@inject BlazorExtensionsInteropService BlazorExtensionsInteropService;



<div class="main">

    <BlazorPlaceholder Name="navbar">
        @Body
    </BlazorPlaceholder>

    <main role="main" class="container">
        <BlazorPlaceholder Name="main">
            @Body
        </BlazorPlaceholder>
    </main>


    <footer class="container">

        <BlazorPlaceholder Name="footer">
            @Body
        </BlazorPlaceholder>

    </footer>
</div>


@code
{

    [Parameter]
    public string Language { get; set; }

    [CascadingParameter]
    public ContextStateProvider ContextStateProvider { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await ContextStateProvider.SaveChangesAsync();

       
        await ExecuteLocalNavigation();

        await SetPageTitle();

    }



    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await Reload();

    }

    private async ValueTask ExecuteLocalNavigation()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (uri.Fragment.Length == 0)
            return;

        await BlazorExtensionsInteropService.NavigateToFragment(uri.Fragment.Substring(1));
       
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args) => await Reload();

    private async Task Reload()
    {
        

        Language = ContextStateProvider.RouteLanguage;


        bool hasRouteError = Language.HasRouteError();


        if (hasRouteError)
        {
            Language = LanguageService.GetLanguageFromUrl(Language).TwoLetterCode;
        }

        await LayoutService.LoadRoute(Language, hasRouteError);

        


        StateHasChanged();
    }

    private async Task SetPageTitle()
    {
        var pageTitle = BlazorStateMachine.GetAllBlazorItemFieldsFromCurrentRoute(null).PlainText("PageTitle")?.Value?.Html();

        if (!string.IsNullOrWhiteSpace(pageTitle))
        {
            await BlazorExtensionsInteropService.SetPageTitle(pageTitle);
        }
    }



    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}

