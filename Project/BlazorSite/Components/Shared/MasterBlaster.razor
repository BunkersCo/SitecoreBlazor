@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Routing
@using Foundation.BlazorExtensions.Components
@using Foundation.BlazorExtensions.Extensions
@using Foundation.BlazorExtensions.Services

@implements IDisposable

@inherits LayoutComponentBase
@inject Foundation.BlazorExtensions.BlazorStateMachine _blazorStateMachine

@inject NavigationManager _navigationManager;
@inject LayoutService _layoutService;
@inject LanguageService _languageService;
@inject BlazorExtensionsInteropService _blazorExtensionsInteropService;



<div class="main">

    <BlazorPlaceholder Name="navbar">
        @Body
    </BlazorPlaceholder>

    <main role="main" class="container">
        <BlazorPlaceholder Name="main">
            @Body
        </BlazorPlaceholder>
    </main>


    <footer class="container">

        <BlazorPlaceholder Name="footer">
            @Body
        </BlazorPlaceholder>

    </footer>
</div>


@code
{

    [Parameter]
    public string Language { get; set; }

    [CascadingParameter]
    public ContextStateProvider ContextStateProvider { get; set; }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return ContextStateProvider.SaveChangesAsync();
    }



    protected override async Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += OnLocationChanged;

        await Reload();

    }


   
    private async void OnLocationChanged(object sender, LocationChangedEventArgs args) => await Reload();

    private async Task Reload()
    {


        Language = ContextStateProvider.RouteLanguage;


        bool hasRouteError = Language.HasRouteError();


        if (hasRouteError)
        {
            Language = _languageService.GetLanguageFromUrl(Language).TwoLetterCode;
        }

        await _layoutService.LoadRoute(Language, hasRouteError);


        await SetPageTitle();




        StateHasChanged();
    }

    private async Task SetPageTitle()
    {
        string pageTitle = _blazorStateMachine.GetAllBlazorItemFieldsFromCurrentRoute(null).PlainText("PageTitle")?.Value?.HtmlDecode();

        if (!string.IsNullOrWhiteSpace(pageTitle))
        {

            try
            {
                await _blazorExtensionsInteropService.SetPageTitle(pageTitle);
            }
            catch (Exception ex)
            {
                // THIS IS FOR BLAZOR-SERVER-SIDE
                Console.WriteLine(ex.Message);
            }


        }
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= OnLocationChanged;
    }

}

