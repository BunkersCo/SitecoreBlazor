@using Foundation.BlazorExtensions.CustomBlazorRouter
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Layouts
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop


@using Foundation.BlazorExtensions.Extensions
@using Foundation.BlazorExtensions.Services



@implements Microsoft.AspNetCore.Components.IComponent
@inject Foundation.BlazorExtensions.BlazorStateMachine _blazorStateMachine;
@inject Foundation.BlazorExtensions.BlazorContext _blazorContext;
@inject IJSRuntime _jsRuntimeCurrent;
@inject Microsoft.AspNetCore.Components.IUriHelper _uriHelper;
@inject SitecoreItemService _sitecoreItemService;
<!--
    Configuring this here is temporary. Later we'll move the app config
    into Program.cs, and it won't be necessary to specify AppAssembly.
-->
@*<Router AppAssembly=typeof(Program).Assembly />*@

@*Instead of using default router from Blazor we will have a customized version, which will allow us to add routes*@
<CustomRouter RouteValues="@RoutesData" />



@functions
    {

    private RouterDataRoot RoutesData = null;

    protected override void OnInit()
    {

        RoutesData = _sitecoreItemService.ConfigRoutes();
    }

    protected override async  void OnAfterRender()
    {
        base.OnAfterRender();

       //_blazorStateMachine.NavigatedRoutes = await _blazorContext.GetNavigatedRouteAsync(_jsRuntimeCurrent);


        string relative = _uriHelper.ToBaseRelativePath(_uriHelper.GetBaseUri(), _uriHelper.GetAbsoluteUri());


        if (relative == "")
        {
            _uriHelper.NavigateTo("en".AddBaseUrl(_uriHelper));

        }

}

}


