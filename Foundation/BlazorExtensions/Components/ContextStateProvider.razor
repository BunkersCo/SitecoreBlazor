@*@using Microsoft.AspNetCore.ProtectedBrowserStorage
    @inject ProtectedSessionStorage ProtectedSessionStore*@

@inject BlazorStateMachine _blazorStateMachine
@inject BlazorStateMachineResolver _blazorStateMachineResolver



@if (_hasLoaded)
{
    <CascadingValue Value="@this">
        @ChildContent
    </CascadingValue>
}
else
{
    <p>Loading...</p>
}


@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }


    [Parameter]
    public string RouteLanguage { get; set; }

    protected bool _hasLoaded;

    protected override async Task OnInitializedAsync()
    {
        await LoadStateAsync();
        _hasLoaded = true;

    }


    public Task SaveChangesAsync()
    {

        if (_blazorStateMachine == null)
        {
            return Task.CompletedTask;
        }


        _blazorStateMachineResolver.SetContextLanguageAsync(_blazorStateMachine.Language);
        _blazorStateMachineResolver.SetCurrentRouteIdAsync(_blazorStateMachine.RouteId);
        _blazorStateMachineResolver.SetCurrentNavigatedRoutesAsync(_blazorStateMachine.NavigatedRoutes);

        return LoadStateAsync();

    }

    public async Task LoadStateAsync()
    {

        try
        {
            _blazorStateMachine.Language = await _blazorStateMachineResolver.GetContextLanguageAsync();
            _blazorStateMachine.NavigatedRoutes = await _blazorStateMachineResolver.GetNavigatedRouteAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            await Task.CompletedTask;

        }

        if (string.IsNullOrWhiteSpace(_blazorStateMachine.Language))
            _blazorStateMachine.Language = RouteLanguage;

    }

}
