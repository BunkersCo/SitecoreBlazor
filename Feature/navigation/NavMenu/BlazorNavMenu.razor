@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using SitecoreBlazorHosted.Shared.Models.Navigation
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Foundation.BlazorExtensions.Extensions
@using Foundation.BlazorExtensions.Components
@using Microsoft.AspNetCore.Components.Web


@inherits BaseComponent

@implements System.IDisposable


@inject Feature.Navigation.Repositories.NavigationRepository NavigationRepository
@inject NavigationManager NavigationManager
@inject Foundation.BlazorExtensions.BlazorStateMachine BlazorStateMachine




@if (NavigationItems == null)
{
    <em>Loading...</em>

}
else
{

    <button class="navbar-toggler" @onclick=BlazorStateMachine.ToggleNavBar>
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class=@(BlazorStateMachine.IsNavBarCollapsed ? "collapse navbar-collapse" : "navbar-collapse")>
        <ul class="navbar-nav mr-auto">

            <li class="nav-item"></li>
            @foreach (var item in NavigationItems)
            {

                if (item.Children == null || !item.Children.Any())
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="@item.Url.AddBaseUrl(NavigationManager)" @onclick="BlazorStateMachine.ToggleNavBar" Match=NavLinkMatch.All>
                            @item.Item.Fields.PlainText("NavigationTitle").Value.HtmlDecode() @*<span class="sr-only">(current)</span>*@
                        </NavLink>
                    </li>
                }
                else
                {

                    <li class="nav-item dropdown">
                        <button type="button" class="btn btn-link nav-link dropdown-toggle" id="navbardrop" aria-haspopup="true" aria-expanded="@IsOpen" @onclick="ToggleSubMenu">
                            @item.Item.Fields.PlainText("NavigationTitle").Value.HtmlDecode()
                        </button>
                        <div class="@ClassName">

                            @foreach (var child in item.Children)
                            {
                                if (child == null)
                                {
                                    continue;
                                }

                                <NavLink class="dropdown-item" @onclick="BlazorStateMachine.ToggleNavBar" href="@child.Url.AddBaseUrl(NavigationManager)" Match=NavLinkMatch.All>@child.Item.Fields.PlainText("NavigationTitle").Value.HtmlDecode()</NavLink>

                            }

                        </div>
                    </li>

                }

            }

        </ul>

        <ul class="nav navbar-nav navbar-right">
            <BlazorPlaceholder Name="navbar-activity-item">
                @ChildContent
            </BlazorPlaceholder>
        </ul>


    </div>

}





@code{

    List<NavigationItem> NavigationItems { get; set; }


    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        NavigationItems = await NavigationRepository.GetMenu();
    }


    string ClassName
    {
        get
        {
            var open = IsOpen ? "show" : null;
            return $"dropdown-menu {open}";
        }
    }

    bool IsOpen { get; set; }
    void ToggleSubMenu(System.EventArgs e)
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }


    private void OnLocationChanges(object sender, LocationChangedEventArgs args) => IsOpen = false;


    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanges;
    }


    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanges;
    }

}
