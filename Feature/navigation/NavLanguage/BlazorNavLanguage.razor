@using System.Net.Http
@using Foundation.BlazorExtensions.Services
@using SitecoreBlazorHosted.Shared.Models
@using Microsoft.JSInterop

@implements Microsoft.AspNetCore.Components.IComponent

@inject IUriHelper _uriHelper
@inject SitecoreBlazorHosted.Shared.PoorManSessionState _poorManSessionState

@inject Foundation.BlazorExtensions.BlazorContext _blazorContext
@inject Foundation.BlazorExtensions.Services.InteropService _interopService;
@inject Foundation.BlazorExtensions.Services.LanguageService _languageService;
@inject Foundation.BlazorExtensions.Services.LayoutService _layoutService;
@inject IJSRuntime _jsRuntimeCurrent;

@if (ValidLanguages == null)
{
    <em>Loading...</em>
}
else
{



    <li class="dropdown">
        <button type="button" class="btn  btn-light  dropdown-toggle " onclick="@(() => ToggleOpen())" aria-haspopup="true">
            @_languageService.Get(CurrentLanguage)?.NativeName
        </button>
        <div class="@ClassName">

            @foreach (var language in ValidLanguages)
            {
                <a class="dropdown-item" onclick="@(() => SwitchLanguage(language))" href="@BuildUrl(language)">@language.NativeName</a>
            }

        </div>
    </li>

}

@functions {

    private string CurrentLanguage { get; set; }

    private IList<Language> ValidLanguages { get; set; }

    

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        CurrentLanguage = _poorManSessionState.Language;

        ValidLanguages = _languageService.GetLanguages().Where(l => l.Name != CurrentLanguage).ToList();

    }

    string ClassName
    {
        get
        {
            var open = IsOpen ? "show" : null;
            return $"dropdown-menu {open}";
        }
    }

    private bool IsOpen { get; set; } = false;
    private void ToggleOpen()
    {
        IsOpen = !IsOpen;
    }



    private string BuildUrl(SitecoreBlazorHosted.Shared.Models.Language language)
    {
        string relative = _uriHelper.ToBaseRelativePath(_uriHelper.GetBaseUri(), _uriHelper.GetAbsoluteUri());

        if (relative.Length > 0 && CurrentLanguage.Length > 0)
        {
            relative = relative.Substring(CurrentLanguage.Length);
        }


        return $"{_uriHelper.GetBaseUri()}{language.TwoLetterCode}{relative}";
    }

    private void SwitchLanguage(Language language)
    {
        _poorManSessionState.Language = language.TwoLetterCode;
        CurrentLanguage = _poorManSessionState.Language;

        ValidLanguages = _languageService.GetLanguages().Where(l => l.Name != CurrentLanguage).ToList();
        ToggleOpen();
        StateHasChanged();


    }



}
