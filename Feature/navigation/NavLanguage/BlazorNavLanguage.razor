@using SitecoreBlazorHosted.Shared.Models
@using Foundation.BlazorExtensions.Components
@using Microsoft.AspNetCore.Components.Web

@inherits BaseComponent

@inject NavigationManager _navigationManager
@inject Foundation.BlazorExtensions.BlazorStateMachine _blazorStateMachine
@inject Foundation.BlazorExtensions.Services.LanguageService _languageService;
@inject Foundation.BlazorExtensions.Services.LayoutService _layoutService;


@if (ValidLanguages == null)
{
    <em>Loading...</em>
}
else
{



    <li class="dropdown">
        <button type="button" class="btn  btn-light  dropdown-toggle " @onclick="() => ToggleOpen()" aria-haspopup="true">
            @_languageService.Get(_blazorStateMachine.Language)?.NativeName
        </button>
        <div class="@ClassName" @onblur="() => ToggleOpen()">

            @foreach (var language in ValidLanguages)
            {
                <a class="dropdown-item" @onclick="() => ToggleOpen()" href="@BuildUrl(language)">@language.NativeName</a>
            }

        </div>
    </li>

}

@code{


    private IList<Language> ValidLanguages { get; set; }


    protected override Task OnParametersSetAsync()
    {

        ValidLanguages = _languageService.GetLanguages().Where(l => l.Name != _blazorStateMachine.Language).ToList();

        return base.OnParametersSetAsync();
    }




    string ClassName
    {
        get
        {
            var open = IsOpen ? "show" : null;
            return $"dropdown-menu {open}";
        }
    }

    private bool IsOpen { get; set; } = false;
    private void ToggleOpen()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    private void CloseNavMenuAndNavBar()
    {
        if (!_blazorStateMachine.IsNavBarCollapsed)
            _blazorStateMachine.ToggleNavBar();

        ToggleOpen();
    }

    private void SwitchLanguage(Language language)
    {

        //if (!_blazorStateMachine.IsNavBarCollapsed)
        //    _blazorStateMachine.ToggleNavBar();

        //_blazorStateMachine.Language = language.TwoLetterCode;

        //ValidLanguages = _languageService.GetLanguages().Where(l => l.Name != _blazorStateMachine.Language).ToList();

        ToggleOpen();

    }

    private string BuildUrl(SitecoreBlazorHosted.Shared.Models.Language language)
    {
        string relative = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);

        if (relative.Length > 0 && _blazorStateMachine.Language.Length > 0)
        {
            relative = relative.Substring(_blazorStateMachine.Language.Length);
        }


        return $"{_navigationManager.BaseUri}{language.TwoLetterCode}{relative}";
    }


}
