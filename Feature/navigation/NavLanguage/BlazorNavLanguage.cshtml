@using System.Net.Http
@using Microsoft.AspNetCore.Blazor
@using Microsoft.AspNetCore.Blazor.Components
@using Microsoft.AspNetCore.Blazor.Routing
@using Foundation.BlazorExtensions.Services
@using SitecoreBlazorHosted.Shared.Models

@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper uriHelper

@inject Foundation.BlazorExtensions.BlazorContext blazorContext

@inject Foundation.BlazorExtensions.Services.InteropService interopService;

@inject Foundation.BlazorExtensions.Services.LanguageService languageService;


@if (ValidLanguages == null)
{
    <em>Loading...</em>
}
else
{



    <li class="dropdown">
        <button type="button" class="btn  btn-light  dropdown-toggle " onclick="@(() => ToggleOpen())" aria-haspopup="true">
            @languageService.Get(CurrentLanguage)?.NativeName
        </button>
        <div class="@ClassName">

            @foreach (var language in ValidLanguages)
            {
                <a class="dropdown-item" onclick="@(() => HardReload())" href="@BuildUrl(language)">@language.NativeName</a>
            }

        </div>
    </li>

}

@functions {

private string CurrentLanguage { get; set; }

private IList<Language> ValidLanguages { get; set; }




protected override async Task OnParametersSetAsync()
{
    CurrentLanguage = await blazorContext.GetContextLanguageAsync();

    ValidLanguages = languageService.GetLanguages().Where(l => l.Name != CurrentLanguage).ToList();
}

string ClassName
{
    get
    {
        var open = IsOpen ? "show" : null;
        return $"dropdown-menu {open}";
    }
}

private bool IsOpen { get; set; } = false;
private void ToggleOpen()
{
    IsOpen = !IsOpen;
}



private string BuildUrl(SitecoreBlazorHosted.Shared.Models.Language language)
{
    string relative = uriHelper.ToBaseRelativePath(uriHelper.GetBaseUri(), uriHelper.GetAbsoluteUri());

    if (CurrentLanguage.Length > 0)
        relative = relative.Substring(CurrentLanguage.Length);

    return $"{uriHelper.GetBaseUri()}{language.TwoLetterCode}{relative}";
}

private async Task HardReload()
{
    await interopService.HardReload();
}



}
